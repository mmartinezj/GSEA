}
View(C5_GOBP)
View(egs_df_excel2)
if (category == "C5"){
#Write table for GOBP
C5_GOBP <- egs_df_excel2[grep("^GOBP", egs_df_excel2$Description),]
#C5_GOBP <- egs_df[str_detect(egs_df$Description, "GOBP"),] #Alternative way to extract subsets
write.table(C5_GOBP, file = paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, "tableGSEA_0.05_stat_ENSEMBL_noNA_C5_GOBP_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for GOCC
C5_GOCC <- egs_df_excel2[grep("^GOCC", egs_df_excel2$Description),]
write.table(C5_GOCC, file = paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, "tableGSEA_0.05_stat_ENSEMBL_noNA_C5_GOCC_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for GOMF
C5_GOMF <- egs_df_excel2[grep("^GOMF", egs_df_excel2$Description),]
write.table(C5_GOMF, file = paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, "tableGSEA_0.05_stat_ENSEMBL_noNA_C5_GOMF_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for HP
C5_HP <- egs_df_excel2[grep("^HP", egs_df_excel2$Description),]
write.table(C5_HP, file = paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, "tableGSEA_0.05_stat_ENSEMBL_noNA_C5_HP_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
}
jpeg(file = paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, prefix, "_dotplot.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15)
invisible(dev.off())
jpeg(file = paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, prefix, "_gene_concept_net_stat_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs, categorySize="pvalue", foldChange=NULL, font.size = 15, colorEdge = T)
invisible(dev.off())
jpeg(file = paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, prefix, "_ridge_stat_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
ridgeplot(egs, fill="p.adjust", core_enrichment = TRUE, orderBy = "NES")
invisible(dev.off())
jpeg(file = paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, prefix, "_heatplot_stat_.jpeg", sep =""), units = 'in', width = 20, height = 10, res = 300)
heatplot(egs, foldChange=NULL)
invisible(dev.off())
##GSEAplot
jpeg(file = paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, prefix, "_gsea_plot_stat_.jpeg", sep =""), units = 'in', width = 20, height = 10, res = 300)
gseaplot(egs, geneSetID = 1)
invisible(dev.off())
genes_20first <- as.data.frame(as.factor(head(egs@result$core_enrichment, 20)))
lista_20first <- list()
for (i in 1:nrow(genes_20first)){
lista_20first[[i]] <- unlist(strsplit(as.character(genes_20first[i,1]),split="/"))
}
uniq_genes <- as.character(unique(names(dat_sort)))
keep <- !is.na(uniq_genes)
uniq_genes <- uniq_genes[keep] #if there is a NA, row.names(mat_20first) <- uniq_genes, wont work
func_20first <- egs$Description[1:10]
mat <- matrix(0L, nrow = length(uniq_genes), ncol = length(func_20first))
for (i in 1:length(uniq_genes)) {
for (j in 1:length(func_20first)) {
gen <- uniq_genes[i]
if (gen %in% lista_20first[[j]]) {
mat[i,j] =  1
}}}
mat_20first <- as.data.frame(mat)
colnames(mat_20first) <- func_20first
row.names(mat_20first) <- uniq_genes
jpeg(file = paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, prefix, "_upset_20first_stat_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
upset(mat_20first, nsets=10, order.by="freq", sets.bar.color="skyblue")
invisible(dev.off())
jpeg(file = paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, prefix, "_upset.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
enrichplot::upsetplot(egs)
invisible(dev.off())
p2 <- emapplot(egs, showCategory = 10)
cowplot::plot_grid(p2, ncol = 1, lables = LETTERS[1])
###Plot the GSEA if terms are provided and if not, plot the first 5 more abundant terms
sig_categories <- nrow(egs_df)
for (j in 1:sig_categories){
pl <- gseaplot2(egs, geneSetID=j, title = egs$Description[j], base_size=40, color="red")
desc <- gsub(" ", "_", egs$Description[j], fixed = TRUE)
filename <- paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, desc, "_", prefix, ".jpeg", sep ="")
ggsave(pl, file=filename, device = "jpeg", units= "in", height = 15, width = 20)
}
if (sig_categories < 20){
for (j in 1:sig_categories){
pl <- gseaplot2(egs, geneSetID=j, title = egs$Description[j], base_size=40, color="red")
desc <- gsub(" ", "_", egs$Description[j], fixed = TRUE)
filename <- paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, desc, "_", prefix, ".jpeg", sep ="")
ggsave(pl, file=filename, device = "jpeg", units= "in", height = 15, width = 20)
}
else
if (sig_categories < 20){
for (j in 1:sig_categories){
pl <- gseaplot2(egs, geneSetID=j, title = egs$Description[j], base_size=40, color="red")
desc <- gsub(" ", "_", egs$Description[j], fixed = TRUE)
filename <- paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, desc, "_", prefix, ".jpeg", sep ="")
ggsave(pl, file=filename, device = "jpeg", units= "in", height = 15, width = 20)
}
} else{
for (j in 1:20){
pl <- gseaplot2(egs, geneSetID=j, title = egs$Description[j], base_size=40, color="red")
desc <- gsub(" ", "_", egs$Description[j], fixed = TRUE)
filename <- paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, desc, "_", prefix, ".jpeg", sep ="")
ggsave(pl, file=filename, device = "jpeg", units= "in", height = 15, width = 20)
}
}
View(egs_df)
View(data)
colnames(data)
rownames(data)
egs_df$core_enrichment[1,]
egs_df$core_enrichment[1]
list <- as.list(egs_df$core_enrichment[1])
View(list)
list_split <- stringr::str_split_fixed(list, "/", 1)
View(list_split)
list_split <- separate_rows(egs_df$core_enrichment[1], sep = "/", convert = FALSE)
is.data.frame(egs_df$core_enrichment[1])
list_split <- strsplit(as.character(egs_df$core_enrichment[1]), "/", fixed = T)
View(list_split)
list_split_rows <- data.frame(matrix(unlist(list_split), nrow=length(list_split), byrow=TRUE), stringsAsFactors=FALSE)
View(list_split_rows)
list_split_rows <- data.frame(t(sapply(list_split,c)))
View(list_split)
View(list_split_rows)
View(list_split_rows)
View(list_split)
View(list_split_rows)
list_split_rows <- list_split
is.list(list_split)
list_split_rows <- as.data.frame(do.call(rbind, list_split))
View(list_split_rows)
list_split_rows <- as.data.frame(do.call(rbind, list_split))
list_split_rows <- as.data.frame(do.call(rbind, list_split))
View(list_split_rows)
View(list_split)
list_rows <- as.data.frame(do.call(rbind, list_split_rows))
View(list_rows)
rm list_split_rows
rm(list_split_rows)
list_split_rows <- as.data.frame(do.call(rbind, list_split))
View(list_split_rows)
list_split_rows <- as.data.frame(do.call(cbind, list_split))
View(list_split_rows)
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/deseq2_noNA_padj_Affected_vs_Unaffected.tsv"
data <- read.table(input, sep= "\t", quote = "", header=T, row.names = 1)
prefix <- "GSEA_results"
folder <- "GSEA_stat_C2_noNA_genes/"
dat <- data$stat
names(dat) <- as.character(rownames(data))
dat_filtered <- dat[!duplicated(names(dat))] #remove rows with duplicate names = removes 7650 entries with NA as gene symbol
dat_sort <- sort(dat_filtered, decreasing=TRUE)
category <- "C2"
mm_hallmark_sets <- msigdbr(species = "Homo sapiens", category = category) %>%
dplyr::select(gs_name, ensembl_gene)
head(mm_hallmark_sets)
set.seed(123)
egs <- GSEA(geneList = dat_sort, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH", seed = T, TERM2GENE = mm_hallmark_sets)
head(egs@result)
egs_df <- data.frame(egs@result)
egs_df_excel2 <- egs_df[, 2:length(egs_df)]
write.table(egs_df_excel2, file = paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, "tableGSEA_0.05_stat_ENSEMBL_noNA_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(clusterProfiler, quietly = TRUE)
library(enrichplot, quietly = TRUE)
library(UpSetR, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(ggupset, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(optparse, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
library(dplyr, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(fgsea, quietly = TRUE)
library(reshape2, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(circlize, quietly = TRUE)
library(msigdbr, quietly = TRUE)
library(data.table, quietly = TRUE)
library(DT, quietly = TRUE)
library(stringr, quietly = TRUE)
})
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(clusterProfiler, quietly = TRUE)
library(enrichplot, quietly = TRUE)
library(UpSetR, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(ggupset, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(optparse, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
library(dplyr, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(fgsea, quietly = TRUE)
library(reshape2, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(circlize, quietly = TRUE)
library(msigdbr, quietly = TRUE)
library(data.table, quietly = TRUE)
library(DT, quietly = TRUE)
library(stringr, quietly = TRUE)
})
sessionInfo()
installed.packages(fields = c("Package", "Version"))
sessionInfo()
writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
#Save session info
save <- "yes"
if (save == "yes"){
writeLines(capture.output(sessionInfo()), "sessionInfo_GSEA.txt")
}
knitr::opts_chunk$set(include = TRUE, echo = TRUE, message = FALSE, warning = FALSE, eval = FALSE)
#Activate libraries
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(optparse, quietly = TRUE)
library(vsn, quietly = TRUE)
library(gplots, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(cluster, quietly = TRUE)
library(pheatmap, quietly = TRUE)
library(grid, quietly = TRUE)
library(BiocManager, quietly = TRUE)
library(DESeq2, quietly = TRUE)
library(AnnotationDbi, quietly = TRUE)
library(EnhancedVolcano, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(ggrepel, quietly = TRUE)
library(cp4p, quietly = TRUE)
library(FDRestimation, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
})
save <- "yes"
if (save == "yes"){
writeLines(capture.output(sessionInfo()), "sessionInfo_DESeq2.txt")
}
if (save == "yes"){
print(writeLines(capture.output(sessionInfo()), "sessionInfo_DESeq2.txt"))
}
sessionInfo()
rm(list=ls())
#Install libraries
repos = "http://cran.us.r-project.org"
if ("optparse" %in% row.names(installed.packages())  == FALSE) install.packages("optparse", repos = repos)
if ("gplots" %in% row.names(installed.packages())  == FALSE) install.packages("gplots", repos = repos)
if ("ggplot2" %in% row.names(installed.packages())  == FALSE) install.packages("ggplot2", repos = repos)
if ("RColorBrewer" %in% row.names(installed.packages())  == FALSE) install.packages("RColorBrewer", repos = repos)
if ("cluster" %in% row.names(installed.packages())  == FALSE) install.packages("cluster", repos = repos)
if ("pheatmap" %in% row.names(installed.packages())  == FALSE) install.packages("pheatmap", repos = repos)
if ("grid" %in% row.names(installed.packages())  == FALSE) install.packages("grid", repos = repos)
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager", repos = repos)
if ("DESeq2" %in% row.names(installed.packages()) == FALSE) BiocManager::install("DESeq2")
if ("AnnotationDbi" %in% row.names(installed.packages()) == FALSE) BiocManager::install("AnnotationDbi")
if ("vsn" %in% row.names(installed.packages())  == FALSE) BiocManager::install("vsn")
if ("EnhancedVolcano" %in% row.names(installed.packages())  == FALSE) BiocManager::install("EnhancedVolcano")
if ("tidyr" %in% row.names(installed.packages())  == FALSE) BiocManager::install("tidyr")
if ("org.Hs.eg.db" %in% row.names(installed.packages()) == FALSE) BiocManager::install("org.Hs.eg.db")
if ("apeglm" %in% row.names(installed.packages()) == FALSE) BiocManager::install("apeglm")
#Activate libraries
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(optparse, quietly = TRUE)
library(vsn, quietly = TRUE)
library(gplots, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(cluster, quietly = TRUE)
library(pheatmap, quietly = TRUE)
library(grid, quietly = TRUE)
library(BiocManager, quietly = TRUE)
library(DESeq2, quietly = TRUE)
library(AnnotationDbi, quietly = TRUE)
library(EnhancedVolcano, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(ggrepel, quietly = TRUE)
library(cp4p, quietly = TRUE)
library(FDRestimation, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
})
save <- "yes"
if (save == "yes"){
writeLines(capture.output(sessionInfo()), "sessionInfo_GSEA.txt")
if (save == "yes"){
writeLines(capture.output(sessionInfo()), "sessionInfo_GSEA.txt")
}
if (save == "yes"){
writeLines(capture.output(sessionInfo()), "sessionInfo_DESeq2.txt")
}
sessionInfo()
knitr::opts_chunk$set(include = TRUE, echo = TRUE, message = FALSE, warning = FALSE, eval = FALSE)
#Activate libraries
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(optparse, quietly = TRUE)
library(vsn, quietly = TRUE)
library(gplots, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(cluster, quietly = TRUE)
library(pheatmap, quietly = TRUE)
library(grid, quietly = TRUE)
library(BiocManager, quietly = TRUE)
library(DESeq2, quietly = TRUE)
library(AnnotationDbi, quietly = TRUE)
library(EnhancedVolcano, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(ggrepel, quietly = TRUE)
library(cp4p, quietly = TRUE)
library(FDRestimation, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
})
writeLines(capture.output(sessionInfo()), "sessionInfo_DESeq2.txt")
.libPaths()
.libPaths()
installed <- as.data.frame(installed.packages())
View(installed)
write.csv(installed, 'installed_previously.csv')
install.packages("kissDE")
install.packages("BiocManager")
BiocManager::install("kissDE")
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(optparse, quietly = TRUE)
library(vsn, quietly = TRUE)
library(gplots, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(cluster, quietly = TRUE)
library(pheatmap, quietly = TRUE)
library(grid, quietly = TRUE)
library(BiocManager, quietly = TRUE)
library(DESeq2, quietly = TRUE)
library(AnnotationDbi, quietly = TRUE)
library(EnhancedVolcano, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(ggrepel, quietly = TRUE)
library(cp4p, quietly = TRUE)
library(FDRestimation, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
})
knitr::opts_chunk$set(echo = TRUE)
mean<-mean(ToothGrowth$len)
stddev<-sd(ToothGrowth$len)
n<-length(ToothGrowth$len)
qt(0.975, df=n-1)
( error <- qt(0.975, df=n-1)*stddev/sqrt(n) )
( lower_bound <- mean - error )
(upper_bound <- mean + error )
library(DescTools)
if ("DescTools" %in% row.names(installed.packages()) == FALSE) BiocManager::install("DescTools")
library(DescTools)
MeanCI(x=ToothGrowth$len, method="classic", type="stud")
if ("DescTools" %in% row.names(installed.packages()) == FALSE) BiocManager::install("DescTools")
library(DescTools)
MeanCI(x=ToothGrowth$len, method="classic", type="stud")
knitr::opts_chunk$set(echo = TRUE)
library(openintro)
list_of_packages <- c("openintro",
"gmodels")
new_packages <- list_of_packages[!(list_of_packages %in%
install.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packges)
library(openintro)
list_of_packages <- c("openintro",
"gmodels")
new_packages <- list_of_packages[!(list_of_packages %in%
install.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packges)
list_of_packages <- c("openintro",
"gmodels")
new_packages <- list_of_packages[!(list_of_packages %in%
install.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
library(openintro)
library(gmodels)
CrossTable(hsb2$prog)
CrossTable(hsb2$prog, hsb2$gender)
list_of_packages <- c("openintro",
"gmodels",
"tidyverese")
new_packages <- list_of_packages[!(list_of_packages %in%
install.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
install.packages(new_packages)
library(tidyverse)
hsb2 %>%
+   group_by(prog) %>%
+   summarize(n = n())
library(openintro)
library(gmodels)
CrossTable(hsb2$prog)
hsb2 %>%
+   group_by(prog) %>%
+   summarize(n = n())
library(tidyverse)
hsb2 %>%
+   group_by(prog) %>%
+   summarize(n = n())
hsb2 %>%
group_by(prog) %>%
summarize(n = n())
hsb2 %>%
group_by(prog) %>%
summarize(n = n())
hsb2 %>%
group_by(prog, gender) %>%
summarize(n = n())
str(hsb2)
hsb2$gender2 <- as.factor(hsb2$gender)
update.packages()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(tidyverse)
library(ggstatsplot)
library(rstatix)
datos <- data.frame(name=c("impuestos","servicios"), count=c(624, 1200-624))
datos
ggpiestats(datos, x=name, counts=count, bf.message=FALSE)
Convictions <-matrix(c(2, 10, 15, 3),
nrow = 2,
dimnames = list(c("Dizygotic", "Monozygotic"),
c("Convicted", "Not convicted")))
View(Convictions)
#Para realizar el gráfico necesitamos los datos en formato dataframe
as.data.frame(as.table(Convictions))
ggbarstats( data = as.data.frame(as.table(Convictions)),
x = Var2,
y = Var1,
counts = Freq)
View(Convictions)
# para realizar la prueba necesitamos los datos en formato tabla
fisher_test(Convictions, alternative = "less")
rm(list=ls())
library(tidyverse)
setwd("C:/Users/CBM/Documents/GitHub/splicing/moccasin/PsychENCODE_simplifier")
data <- read.table("processed_psychencode.tsv", header = T, sep = "\t")
col_number_length <- replace(data$full_event_id_junc_A, is.na(data$full_event_id_junc_A), "N/A")
col_number <- max(str_count(col_number_length, ";") + 1)
output <- data %>%
separate(full_event_id_junc_A,
into = paste0("full_event_id_junc", seq_len(col_number)),
sep = ";") %>%
separate(total_reads_junc,
into = paste0("total_reads_junc", seq_len(col_number)),
sep = ";") %>%
#separate(full_event_id_ir,
#into = paste0("full_event_id_ir", seq_len(col_number)),
#sep = ";") %>%
#separate(total_ir_read,
#into = paste0("total_reads_ir", seq_len(col_number)),
#sep = ";") %>%
separate(dPSI.Controls.BP._junc,
into = paste0("dPSI.Controls.BP._junc", seq_len(col_number)),
sep = ";") %>%
#separate(Aff.Unaff_ir,
#into = paste0("Aff.Unaff_ir", seq_len(col_number)),
#sep = ";") %>%
separate(WILCOXON_junc,
into = paste0("WILCOXON_junc", seq_len(col_number)),
sep = ";")
output <- replace(output, is.na(output), "N/A")
output <- replace(output, output == "N/A", "")
write.table(output, "separated_psychencode.tsv", sep = "\t", quote = FALSE, row.names = FALSE, col.names = T)
rm(list=ls())
repos = "http://cran.us.r-project.org"
if ("UpSetR" %in% row.names(installed.packages())  == FALSE) install.packages("UpSetR", repos = repos)
if ("ggplot2" %in% row.names(installed.packages())  == FALSE) install.packages("ggplot2", repos = repos)
if ("RColorBrewer" %in% row.names(installed.packages())  == FALSE) install.packages("RColorBrewer", repos = repos)
if ("optparse" %in% row.names(installed.packages())  == FALSE) install.packages("optparse", repos = repos)
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if ("clusterProfiler" %in% row.names(installed.packages()) == FALSE) BiocManager::install("clusterProfiler")
if ("enrichplot" %in% row.names(installed.packages()) == FALSE) BiocManager::install("enrichplot")
if ("org.Hs.eg.db" %in% row.names(installed.packages()) == FALSE) BiocManager::install("org.Hs.eg.db")
if ("ComplexHeatmap" %in% row.names(installed.packages()) == FALSE) BiocManager::install("ComplexHeatmap")
if ("msigdbr" %in% row.names(installed.packages()) == FALSE) BiocManager::install("msigdbr")
if ("stringr" %in% row.names(installed.packages()) == FALSE) BiocManager::install("stringr")
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(clusterProfiler, quietly = TRUE)
library(enrichplot, quietly = TRUE)
library(UpSetR, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(ggupset, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(optparse, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
library(dplyr, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(fgsea, quietly = TRUE)
library(reshape2, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(circlize, quietly = TRUE)
library(msigdbr, quietly = TRUE)
library(data.table, quietly = TRUE)
library(DT, quietly = TRUE)
library(stringr, quietly = TRUE)
})
##GET PARAMETERS AND DATA
#Paths
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
#Input file
input_file <- "noNA_genes" #select from noNA_genes, all_genes, shrunken_genes
if(input_file == "noNA_genes"){
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/deseq2_noNA_padj_Affected_vs_Unaffected.tsv"
} else if(input_file == "all_genes"){
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/all_genes_Affected_vs_Unaffected.tsv"
} else if(input_file == "shrunken_genes"){
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/shrunken_log2FC_Affected_vs_Unaffected.tsv.tsv"
}
#Some variables
data <- read.table(input, sep= "\t", quote = "", header=T, row.names = 1)
rm(list=ls())
