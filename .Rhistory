set.seed(123)
egs <- GSEA(geneList = dat_sort, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH", seed = T, TERM2GENE = mm_hallmark_sets)
head(egs@result)
egs_df <- data.frame(egs@result)
egs_df_excel2 <- egs_df[, 2:length(egs_df)]
#egs_df_excel <- egs_df
#names(egs_df_excel)[names(egs_df_excel) == 'ID'] <- 'Identifier'
write.table(egs_df_excel2, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
} else {
for(subcat in subcategory){
print(paste0("Performing GSEA for ", subcat))
#Obtain hallmark gene sets relevant to Homo sapiens
mm_hallmark_sets <- msigdbr(species = "Homo sapiens", category = category, subcategory = subcat) %>%
dplyr::select(gs_name, ensembl_gene)
head(mm_hallmark_sets) #Check using sets
#Calculate GSEA and write tables of results
set.seed(123)
egs <- GSEA(geneList = dat_sort, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH", seed = T, TERM2GENE = mm_hallmark_sets)
head(egs@result)
new_name <- gsub(':','_', subcat)
assign(new_name, egs)
egs_df <- data.frame(egs@result)
egs_df_excel2 <- egs_df[, 2:length(egs_df)]
#egs_df_excel <- egs_df
#names(egs_df_excel)[names(egs_df_excel) == 'ID'] <- 'Identifier'
resD0 <- paste0("results/GSEA_", statistic, "_")
resD <- gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/'))
write.table(egs_df_excel2, file = gsub(':','_', paste0(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcat, "_", input_file, "_", prefix,".txt", sep ="")), sep= "\t", quote = F, row.names = F)
}
if (category == "C5" & is.null(subcategory)){
#Write table for GOBP
C5_GOBP <- egs_df_excel2[grep("^GOBP", egs_df_excel2$Description),]
#C5_GOBP <- egs_df[str_detect(egs_df$Description, "GOBP"),] #Alternative way to extract subsets
write.table(C5_GOBP, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_C5_GOBP_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for GOCC
C5_GOCC <- egs_df_excel2[grep("^GOCC", egs_df_excel2$Description),]
write.table(C5_GOCC, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_C5_GOCC_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for GOMF
C5_GOMF <- egs_df_excel2[grep("^GOMF", egs_df_excel2$Description),]
write.table(C5_GOMF, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_C5_GOMF_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for HP
C5_HP <- egs_df_excel2[grep("^HP", egs_df_excel2$Description),]
write.table(C5_HP, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_HP_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
}
}
if (as.numeric(length(subcategory)) <= 1 | is.null(subcategory)){
##Dotplot / BarPlot
jpeg(file = paste(resD, prefix, "_dotplot.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15)
invisible(dev.off())
##Gene-concept network
jpeg(file = paste(resD, prefix, "_gene_concept_net_", statistic, "_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs, categorySize="pvalue", foldChange=NULL, font.size = 15, colorEdge = T)
invisible(dev.off())
##Ridgeline plot
jpeg(file = paste(resD, prefix, "_ridge_", statistic, "_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
ridgeplot(egs, fill="p.adjust", core_enrichment = TRUE, orderBy = "NES")
invisible(dev.off())
##Heatplot
jpeg(file = paste(resD, prefix, "_heatplot_", statistic, "_.jpeg", sep =""), units = 'in', width = 20, height = 10, res = 300)
heatplot(egs, foldChange=NULL)
invisible(dev.off())
##GSEAplot
jpeg(file = paste(resD, prefix, "_gsea_plot_", statistic, "_.jpeg", sep =""), units = 'in', width = 20, height = 10, res = 300)
gseaplot(egs, geneSetID = 1)
invisible(dev.off())
} else {
for(subcat in subcategory){
GSEA_obj <- gsub(':','_', subcat)
GSEA_obj <- get(GSEA_obj)
##Dotplot / BarPlot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_dotplot.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(dotplot(GSEA_obj, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15))
invisible(dev.off())
##Gene-concept network
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_gene_concept_net_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(cnetplot(GSEA_obj, categorySize="pvalue", foldChange=NULL, font.size = 15, colorEdge = T))
invisible(dev.off())
##Ridgeline plot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_ridge_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(ridgeplot(GSEA_obj, fill="p.adjust", core_enrichment = TRUE, orderBy = "NES"))
invisible(dev.off())
##Heatplot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_heatplot_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
print(heatplot(GSEA_obj, foldChange=NULL))
invisible(dev.off())
##GSEAplot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_gsea_plot_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
print(gseaplot(GSEA_obj, geneSetID = 1))
invisible(dev.off())
}
}
if (as.numeric(length(subcategory)) <= 1 | is.null(subcategory)){
##Dotplot / BarPlot
jpeg(file = paste(resD, prefix, "_dotplot.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15))
invisible(dev.off())
##Gene-concept network
jpeg(file = paste(resD, prefix, "_gene_concept_net_", statistic, "_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(cnetplot(egs, categorySize="pvalue", foldChange=NULL, font.size = 15, colorEdge = T))
invisible(dev.off())
##Ridgeline plot
jpeg(file = paste(resD, prefix, "_ridge_", statistic, "_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(ridgeplot(egs, fill="p.adjust", core_enrichment = TRUE, orderBy = "NES"))
invisible(dev.off())
##Heatplot
jpeg(file = paste(resD, prefix, "_heatplot_", statistic, "_.jpeg", sep =""), units = 'in', width = 20, height = 10, res = 300)
print(heatplot(egs, foldChange=NULL))
invisible(dev.off())
##GSEAplot
jpeg(file = paste(resD, prefix, "_gsea_plot_", statistic, "_.jpeg", sep =""), units = 'in', width = 20, height = 10, res = 300)
gseaplot(egs, geneSetID = 1)
invisible(dev.off())
} else {
for(subcat in subcategory){
GSEA_obj <- gsub(':','_', subcat)
GSEA_obj <- get(GSEA_obj)
##Dotplot / BarPlot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_dotplot.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(dotplot(GSEA_obj, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15))
invisible(dev.off())
##Gene-concept network
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_gene_concept_net_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(cnetplot(GSEA_obj, categorySize="pvalue", foldChange=NULL, font.size = 15, colorEdge = T))
invisible(dev.off())
##Ridgeline plot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_ridge_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(ridgeplot(GSEA_obj, fill="p.adjust", core_enrichment = TRUE, orderBy = "NES"))
invisible(dev.off())
##Heatplot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_heatplot_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
print(heatplot(GSEA_obj, foldChange=NULL))
invisible(dev.off())
##GSEAplot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_gsea_plot_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
print(gseaplot(GSEA_obj, geneSetID = 1))
invisible(dev.off())
}
}
#Outputs
if (length(subcategory) <= 1 ){
resD0 <- paste0("results/GSEA_", statistic, "_")
resD <- gsub(':','_', paste0(resD0, category,'_', subcategory, input_file, '/'))
if (!file.exists(resD)){
dir.create(file.path(resD))
}
} else{
i=0
for(subcat in subcategory){
i=i+1
resD0 <- paste0("results/GSEA_", statistic, "_")
resD <- gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/'))
if (!file.exists(resD)){
dir.create(file.path(resD))
}
}
}
if (as.numeric(length(subcategory)) <= 1 | is.null(subcategory)){
#Obtain hallmark gene sets relevant to Homo sapiens
mm_hallmark_sets <- msigdbr(species = "Homo sapiens", category = category, subcategory = subcategory) %>%
dplyr::select(gs_name, ensembl_gene)
head(mm_hallmark_sets) #Check using sets
#Calculate GSEA and write tables of results
set.seed(123)
egs <- GSEA(geneList = dat_sort, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH", seed = T, TERM2GENE = mm_hallmark_sets)
head(egs@result)
egs_df <- data.frame(egs@result)
egs_df_excel2 <- egs_df[, 2:length(egs_df)]
#egs_df_excel <- egs_df
#names(egs_df_excel)[names(egs_df_excel) == 'ID'] <- 'Identifier'
write.table(egs_df_excel2, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
} else {
for(subcat in subcategory){
print(paste0("Performing GSEA for ", subcat))
#Obtain hallmark gene sets relevant to Homo sapiens
mm_hallmark_sets <- msigdbr(species = "Homo sapiens", category = category, subcategory = subcat) %>%
dplyr::select(gs_name, ensembl_gene)
head(mm_hallmark_sets) #Check using sets
#Calculate GSEA and write tables of results
set.seed(123)
egs <- GSEA(geneList = dat_sort, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH", seed = T, TERM2GENE = mm_hallmark_sets)
head(egs@result)
new_name <- gsub(':','_', subcat)
assign(new_name, egs)
egs_df <- data.frame(egs@result)
egs_df_excel2 <- egs_df[, 2:length(egs_df)]
#egs_df_excel <- egs_df
#names(egs_df_excel)[names(egs_df_excel) == 'ID'] <- 'Identifier'
resD0 <- paste0("results/GSEA_", statistic, "_")
resD <- gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/'))
write.table(egs_df_excel2, file = gsub(':','_', paste0(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcat, "_", input_file, "_", prefix,".txt", sep ="")), sep= "\t", quote = F, row.names = F)
}
if (category == "C5" & is.null(subcategory)){
#Write table for GOBP
C5_GOBP <- egs_df_excel2[grep("^GOBP", egs_df_excel2$Description),]
#C5_GOBP <- egs_df[str_detect(egs_df$Description, "GOBP"),] #Alternative way to extract subsets
write.table(C5_GOBP, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_C5_GOBP_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for GOCC
C5_GOCC <- egs_df_excel2[grep("^GOCC", egs_df_excel2$Description),]
write.table(C5_GOCC, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_C5_GOCC_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for GOMF
C5_GOMF <- egs_df_excel2[grep("^GOMF", egs_df_excel2$Description),]
write.table(C5_GOMF, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_C5_GOMF_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for HP
C5_HP <- egs_df_excel2[grep("^HP", egs_df_excel2$Description),]
write.table(C5_HP, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_HP_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
}
}
if (as.numeric(length(subcategory)) <= 1 | is.null(subcategory)){
##Dotplot / BarPlot
jpeg(file = paste(resD, prefix, "_dotplot.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15))
invisible(dev.off())
##Gene-concept network
jpeg(file = paste(resD, prefix, "_gene_concept_net_", statistic, "_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(cnetplot(egs, categorySize="pvalue", foldChange=NULL, font.size = 15, colorEdge = T))
invisible(dev.off())
##Ridgeline plot
jpeg(file = paste(resD, prefix, "_ridge_", statistic, "_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(ridgeplot(egs, fill="p.adjust", core_enrichment = TRUE, orderBy = "NES"))
invisible(dev.off())
##Heatplot
jpeg(file = paste(resD, prefix, "_heatplot_", statistic, "_.jpeg", sep =""), units = 'in', width = 20, height = 10, res = 300)
print(heatplot(egs, foldChange=NULL))
invisible(dev.off())
##GSEAplot
jpeg(file = paste(resD, prefix, "_gsea_plot_", statistic, "_.jpeg", sep =""), units = 'in', width = 20, height = 10, res = 300)
gseaplot(egs, geneSetID = 1)
invisible(dev.off())
} else {
for(subcat in subcategory){
GSEA_obj <- gsub(':','_', subcat)
GSEA_obj <- get(GSEA_obj)
##Dotplot / BarPlot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_dotplot.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(dotplot(GSEA_obj, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15))
invisible(dev.off())
##Gene-concept network
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_gene_concept_net_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(cnetplot(GSEA_obj, categorySize="pvalue", foldChange=NULL, font.size = 15, colorEdge = T))
invisible(dev.off())
##Ridgeline plot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_ridge_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(ridgeplot(GSEA_obj, fill="p.adjust", core_enrichment = TRUE, orderBy = "NES"))
invisible(dev.off())
##Heatplot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_heatplot_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
print(heatplot(GSEA_obj, foldChange=NULL))
invisible(dev.off())
##GSEAplot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_gsea_plot_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
print(gseaplot(GSEA_obj, geneSetID = 1))
invisible(dev.off())
}
}
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(clusterProfiler, quietly = TRUE)
library(enrichplot, quietly = TRUE)
library(UpSetR, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(ggupset, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(optparse, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
library(dplyr, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(fgsea, quietly = TRUE)
library(reshape2, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(circlize, quietly = TRUE)
library(msigdbr, quietly = TRUE)
library(data.table, quietly = TRUE)
library(DT, quietly = TRUE)
library(stringr, quietly = TRUE)
})
##GET PARAMETERS AND DATA
#Paths
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
#Input file
input_file <- "noNA_genes" #select from noNA_genes, all_genes, shrunken_genes
if(input_file == "noNA_genes"){
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/deseq2_noNA_padj_Affected_vs_Unaffected.tsv"
} else if(input_file == "all_genes"){
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/all_genes_Affected_vs_Unaffected.tsv"
} else if(input_file == "shrunken_genes"){
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/shrunken_log2FC_Affected_vs_Unaffected.tsv.tsv"
}
#Some variables
data <- read.table(input, sep= "\t", quote = "", header=T, row.names = 1)
prefix <- "GSEA_results"
category <- "C2"
subcategory <- c("KEGG") #to add subcategories, add them as a vector -> c("x", "y", ...)
statistic <- "stat" #select from stat, shrunken_log2FC, log+pvalue
#Outputs
if (length(subcategory) <= 1 ){
resD0 <- paste0("results/GSEA_", statistic, "_")
resD <- gsub(':','_', paste0(resD0, category,'_', subcategory, input_file, '/'))
if (!file.exists(resD)){
dir.create(file.path(resD))
}
} else{
i=0
for(subcat in subcategory){
i=i+1
resD0 <- paste0("results/GSEA_", statistic, "_")
resD <- gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/'))
if (!file.exists(resD)){
dir.create(file.path(resD))
}
}
}
#Rank data using the desired metric
if (statistic == "logsign+pvalue"){
data$fcsign <- sign(data$log2FoldChange)
data$logP = -log10(data$pvalue)
data$metric = data$logP/data$fcsign
dat <- data$metric
names(dat) <- as.character(rownames(data))
dat_filtered <- dat[!duplicated(names(dat))] #remove rows with duplicate names = removes 7650 entries with NA as gene symbol
dat_sort <- sort(dat_filtered, decreasing=TRUE)
cat("Using logsign+pvalue metric")
} else if(statistic == "stat"){
dat <- data$stat
names(dat) <- as.character(rownames(data))
dat_filtered <- dat[!duplicated(names(dat))] #remove rows with duplicate names = removes 7650 entries with NA as gene symbol
dat_sort <- sort(dat_filtered, decreasing=TRUE)
cat("Using stat metric")
} else if(statistic == "shrunken_log2FC"){
dat <- data$stat
names(dat) <- as.character(rownames(data))
dat_filtered <- dat[!duplicated(names(dat))] #remove rows with duplicate names = removes 7650 entries with NA as gene symbol
dat_sort <- sort(dat_filtered, decreasing=TRUE)
cat("Using shrunken_log2FC metric")
}
if (as.numeric(length(subcategory)) <= 1 | is.null(subcategory)){
#Obtain hallmark gene sets relevant to Homo sapiens
mm_hallmark_sets <- msigdbr(species = "Homo sapiens", category = category, subcategory = subcategory) %>%
dplyr::select(gs_name, ensembl_gene)
head(mm_hallmark_sets) #Check using sets
#Calculate GSEA and write tables of results
set.seed(123)
egs <- GSEA(geneList = dat_sort, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH", seed = T, TERM2GENE = mm_hallmark_sets)
head(egs@result)
egs_df <- data.frame(egs@result)
egs_df_excel2 <- egs_df[, 2:length(egs_df)]
#egs_df_excel <- egs_df
#names(egs_df_excel)[names(egs_df_excel) == 'ID'] <- 'Identifier'
write.table(egs_df_excel2, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
} else {
for(subcat in subcategory){
print(paste0("Performing GSEA for ", subcat))
#Obtain hallmark gene sets relevant to Homo sapiens
mm_hallmark_sets <- msigdbr(species = "Homo sapiens", category = category, subcategory = subcat) %>%
dplyr::select(gs_name, ensembl_gene)
head(mm_hallmark_sets) #Check using sets
#Calculate GSEA and write tables of results
set.seed(123)
egs <- GSEA(geneList = dat_sort, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH", seed = T, TERM2GENE = mm_hallmark_sets)
head(egs@result)
new_name <- gsub(':','_', subcat)
assign(new_name, egs)
egs_df <- data.frame(egs@result)
egs_df_excel2 <- egs_df[, 2:length(egs_df)]
#egs_df_excel <- egs_df
#names(egs_df_excel)[names(egs_df_excel) == 'ID'] <- 'Identifier'
resD0 <- paste0("results/GSEA_", statistic, "_")
resD <- gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/'))
write.table(egs_df_excel2, file = gsub(':','_', paste0(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcat, "_", input_file, "_", prefix,".txt", sep ="")), sep= "\t", quote = F, row.names = F)
}
if (category == "C5" & is.null(subcategory)){
#Write table for GOBP
C5_GOBP <- egs_df_excel2[grep("^GOBP", egs_df_excel2$Description),]
#C5_GOBP <- egs_df[str_detect(egs_df$Description, "GOBP"),] #Alternative way to extract subsets
write.table(C5_GOBP, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_C5_GOBP_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for GOCC
C5_GOCC <- egs_df_excel2[grep("^GOCC", egs_df_excel2$Description),]
write.table(C5_GOCC, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_C5_GOCC_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for GOMF
C5_GOMF <- egs_df_excel2[grep("^GOMF", egs_df_excel2$Description),]
write.table(C5_GOMF, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_C5_GOMF_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for HP
C5_HP <- egs_df_excel2[grep("^HP", egs_df_excel2$Description),]
write.table(C5_HP, file = paste(resD, "tableGSEA_0.05_", statistic, "_ENSEMBL_", category, "_", subcategory, input_file, "_HP_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
}
}
if (as.numeric(length(subcategory)) <= 1 | is.null(subcategory)){
##Dotplot / BarPlot
jpeg(file = paste(resD, prefix, "_dotplot.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15))
invisible(dev.off())
##Gene-concept network
jpeg(file = paste(resD, prefix, "_gene_concept_net_", statistic, "_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(cnetplot(egs, categorySize="pvalue", foldChange=NULL, font.size = 15, colorEdge = T))
invisible(dev.off())
##Ridgeline plot
jpeg(file = paste(resD, prefix, "_ridge_", statistic, "_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(ridgeplot(egs, fill="p.adjust", core_enrichment = TRUE, orderBy = "NES"))
invisible(dev.off())
##Heatplot
jpeg(file = paste(resD, prefix, "_heatplot_", statistic, "_.jpeg", sep =""), units = 'in', width = 20, height = 10, res = 300)
print(heatplot(egs, foldChange=NULL))
invisible(dev.off())
##GSEAplot
jpeg(file = paste(resD, prefix, "_gsea_plot_", statistic, "_.jpeg", sep =""), units = 'in', width = 20, height = 10, res = 300)
gseaplot(egs, geneSetID = 1)
invisible(dev.off())
} else {
for(subcat in subcategory){
GSEA_obj <- gsub(':','_', subcat)
GSEA_obj <- get(GSEA_obj)
##Dotplot / BarPlot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_dotplot.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(dotplot(GSEA_obj, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15))
invisible(dev.off())
##Gene-concept network
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_gene_concept_net_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(cnetplot(GSEA_obj, categorySize="pvalue", foldChange=NULL, font.size = 15, colorEdge = T))
invisible(dev.off())
##Ridgeline plot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_ridge_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(ridgeplot(GSEA_obj, fill="p.adjust", core_enrichment = TRUE, orderBy = "NES"))
invisible(dev.off())
##Heatplot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_heatplot_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
print(heatplot(GSEA_obj, foldChange=NULL))
invisible(dev.off())
##GSEAplot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_gsea_plot_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
print(gseaplot(GSEA_obj, geneSetID = 1))
invisible(dev.off())
}
}
if (as.numeric(length(subcategory)) <= 1 | is.null(subcategory)){
##Dotplot / BarPlot
jpeg(file = paste(resD, prefix, "_dotplot.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15))
invisible(dev.off())
##Gene-concept network
jpeg(file = paste(resD, prefix, "_gene_concept_net_", statistic, "_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(cnetplot(egs, categorySize="pvalue", foldChange=NULL, font.size = 15, colorEdge = T))
invisible(dev.off())
##Ridgeline plot
jpeg(file = paste(resD, prefix, "_ridge_", statistic, "_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(ridgeplot(egs, fill="p.adjust", core_enrichment = TRUE, orderBy = "NES"))
invisible(dev.off())
##Heatplot
jpeg(file = paste(resD, prefix, "_heatplot_", statistic, "_.jpeg", sep =""), units = 'in', width = 20, height = 10, res = 300)
print(heatplot(egs, foldChange=NULL))
invisible(dev.off())
##GSEAplot
jpeg(file = paste(resD, prefix, "_gsea_plot_", statistic, "_.jpeg", sep =""), units = 'in', width = 20, height = 10, res = 300)
print(gseaplot(egs, geneSetID = 1))
invisible(dev.off())
} else {
for(subcat in subcategory){
GSEA_obj <- gsub(':','_', subcat)
GSEA_obj <- get(GSEA_obj)
##Dotplot / BarPlot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_dotplot.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(dotplot(GSEA_obj, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15))
invisible(dev.off())
##Gene-concept network
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_gene_concept_net_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(cnetplot(GSEA_obj, categorySize="pvalue", foldChange=NULL, font.size = 15, colorEdge = T))
invisible(dev.off())
##Ridgeline plot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_ridge_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
print(ridgeplot(GSEA_obj, fill="p.adjust", core_enrichment = TRUE, orderBy = "NES"))
invisible(dev.off())
##Heatplot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_heatplot_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
print(heatplot(GSEA_obj, foldChange=NULL))
invisible(dev.off())
##GSEAplot
jpeg(file = gsub(':','_', paste0(resD0, category,'_', subcat, input_file, '/', prefix, subcat, "_gsea_plot_", statistic, "_.jpeg", sep ="")), units = 'in', width = 15, height = 10, res = 300)
print(gseaplot(GSEA_obj, geneSetID = 1))
invisible(dev.off())
}
}
